"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Allow = void 0;
const core_1 = require("@tsed/core");
const jsonEntityFn_1 = require("./jsonEntityFn");
const property_1 = require("./property");
/**
 * Add allowed values when the property or parameters is required.
 *
 * #### Example on parameter:
 *
 * ```typescript
 * @Post("/")
 * async method(@Allow("") @BodyParams("field") field: string) {}
 * ```
 * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.
 *
 * #### Example on model:
 *
 * ```typescript
 * class Model {
 *   @Allow("")
 *   field: string;
 * }
 * ```
 *
 * @returns {Function}
 * @decorator
 * @validation
 * @swagger
 * @schema
 * @input
 */
function Allow(...values) {
    const model = values.find((item) => core_1.isClass(item));
    return core_1.useDecorators(model && property_1.Property(model), jsonEntityFn_1.JsonEntityFn((store, args) => {
        store.schema.allow(...values);
        switch (store.decoratorType) {
            case core_1.DecoratorTypes.PARAM:
                store.parameter.required(true);
                break;
            case core_1.DecoratorTypes.PROP:
                store.parentSchema.addRequired(store.propertyName);
                break;
            default:
                throw new core_1.UnsupportedDecoratorType(Allow, args);
        }
    }));
}
exports.Allow = Allow;
//# sourceMappingURL=allow.js.map