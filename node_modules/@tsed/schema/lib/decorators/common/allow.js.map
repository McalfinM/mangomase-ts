{"version":3,"file":"allow.js","sourceRoot":"","sources":["../../../src/decorators/common/allow.ts"],"names":[],"mappings":";;;AAAA,qCAA4F;AAC5F,iDAA4C;AAC5C,yCAAoC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,SAAgB,KAAK,CAAC,GAAG,MAAa;IACpC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,cAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACnD,OAAO,oBAAa,CAClB,KAAK,IAAI,mBAAQ,CAAC,KAAK,CAAC,EACxB,2BAAY,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAC3B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC;QAE9B,QAAQ,KAAK,CAAC,aAAa,EAAE;YAC3B,KAAK,qBAAc,CAAC,KAAK;gBACvB,KAAK,CAAC,SAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAChC,MAAM;YACR,KAAK,qBAAc,CAAC,IAAI;gBACtB,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBACnD,MAAM;YACR;gBACE,MAAM,IAAI,+BAAwB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACnD;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAnBD,sBAmBC","sourcesContent":["import {DecoratorTypes, isClass, UnsupportedDecoratorType, useDecorators} from \"@tsed/core\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\nimport {Property} from \"./property\";\n\n/**\n * Add allowed values when the property or parameters is required.\n *\n * #### Example on parameter:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Allow(\"\") @BodyParams(\"field\") field: string) {}\n * ```\n * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.\n *\n * #### Example on model:\n *\n * ```typescript\n * class Model {\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Allow(...values: any[]) {\n  const model = values.find((item) => isClass(item));\n  return useDecorators(\n    model && Property(model),\n    JsonEntityFn((store, args) => {\n      store.schema.allow(...values);\n\n      switch (store.decoratorType) {\n        case DecoratorTypes.PARAM:\n          store.parameter!.required(true);\n          break;\n        case DecoratorTypes.PROP:\n          store.parentSchema.addRequired(store.propertyName);\n          break;\n        default:\n          throw new UnsupportedDecoratorType(Allow, args);\n      }\n    })\n  );\n}\n"]}