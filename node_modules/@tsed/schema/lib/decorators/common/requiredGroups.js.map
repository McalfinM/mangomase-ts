{"version":3,"file":"requiredGroups.js","sourceRoot":"","sources":["../../../src/decorators/common/requiredGroups.ts"],"names":[],"mappings":";;;AAAA,qCAA0C;AAC1C,yDAAoD;AACpD,iDAA4C;AAE5C;;;;;;;;GAQG;AACH,SAAgB,cAAc,CAAC,GAAG,MAAgB;IAChD,OAAO,2BAAY,CAAC,CAAC,MAAM,EAAE,EAAE;QAC7B,IAAI,MAAM,CAAC,aAAa,KAAK,qBAAc,CAAC,IAAI,EAAE;YAChD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,QAAkB,EAAE,WAAqB,EAAE,EAAE;gBAC7F,IAAI,yBAAW,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE;oBACpC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,KAAK,MAAM,CAAC,WAAW,CAAC,CAAC;iBACrE;gBAED,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAZD,wCAYC","sourcesContent":["import {DecoratorTypes} from \"@tsed/core\";\nimport {matchGroups} from \"../../utils/matchGroups\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Apply groups validation strategy for required property.\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function RequiredGroups(...groups: string[]): Function {\n  return JsonEntityFn((entity) => {\n    if (entity.decoratorType === DecoratorTypes.PROP) {\n      entity.parent.schema.$hooks.on(\"requiredGroups\", (required: string[], givenGroups: string[]) => {\n        if (matchGroups(groups, givenGroups)) {\n          return required.filter((key: string) => key !== entity.propertyKey);\n        }\n\n        return required;\n      });\n    }\n  });\n}\n"]}